스프링 IoC 컨테이너와 빈

- 컨테이너는 제어의 역전 원리가 적용된 스프링 핵심 컴포넌트다.
- 컨테이너에 의해 생성 및 조립된 후 관리되는 객체를 빈이라 부른다.
- 빈 생성 시 의존관계 주입이 일어난다.
- 빈 구성정보를 바탕으로 비즈니스 오브젝트를 이용해 애플리케이션 구성하고 생애를 관리한다.


빈 구성정보 란?

- 스프링 컨테이너가 빈 객체 생성 및 구성, 조립시 사용하는 설정정보다.
- 컨테이너 기능을 설정하거나 조정이 필요할 때도 사용된다.
- 자바, 코틀린, 그루비, XML 등 다양한 방식으로 작설할 수 있다.


06_01 자바 기반의 컨테이너 구성

-   https://docs.spring.io/spring-framework/docs/5.3.8/reference/html/core.html#beans-java

06_02 자바 코드로 의존관계 주입하기

싱글톤 스코프 (단 한번만 생성됨)
모든 빈의 기본 스코프
스프링 컨테이너 와 함께 생기고 사라짐.

프로토타입 스코프
항상 새로운 빈을 생성함.



07_01 자동 클래스 탐지로 빈 등록하기
@ComponentScan 사용
@ComponentScan(basePackages = {"moviebuddy"}) 를 사용하면 해당 패키지만 체크
@Component  사용


07_02 객체 타입으로 자동 의존 관계 주입하기
자동으로 의존 관계 성립
@Service
@Autowired


08_01 스프링 통합 테스트 지원
스프링 테스트 컨텍스트 프레임워크

- 테스트에 사용되는 스프링 컨테이너를 생성 및 관리하고 테스트에 적용해주는 기능을 가진 테스트 프레임워크다.
- JUnit 또는 TestNG와 같은 자바용 테스트 프레임워크와 잘 통합되어 동작한다.
- 실 운영환경과 유사한 구성으로 동작하는 통합 테스트를 손쉽게 만들 수 있다.


08_02 영화 검색 컴포넌트 테스트를 스프링 통합 테스트로 변경하기



09_01 데이터 원본 계층


09_02 데이터 원본 패키지로 데이터 접근 클래스들 옮기기

소프트웨어의 두 가지 가치
행위적 가치 : 사용자가 가진 문제를 해결해주는 것
구조적 가치 : 변경하기 쉬운 소프트웨어를 만드는 것


소프트웨어를 구성하는 두 가지 요소
정책 : 모든 업무 규칙과 업무 절차를 구체화 한 것
구현 세부사항 : 입출력 장치, 데이터베이스 등 시스템을 사용 또는 구동하는데 필요한 것

# 외부에서 내부로 접근하는 의존 방향


09_03 스프링의 본질과 개발자의 역할
- LoC와 DI는 객체의 설계와 생성, 관계, 사용에 관한 기술


10_01 애플리케이션이 XML 읽기 컴포넌트를 사용하도록 변경하기



10_03 SLF4J 로깅 프레임워크 적용하기



11_01 애플리케이션을 외부 기술적인 부분들과 분리하라.
서비스 추상화 OXM (자바 객체와 XML을 매핑새서 상호 변환해주는 기술)
Marshaller - 자바 객체를 XML로 변환
Unmarshaller - XML을 자바 객체로 변환


11_02 스프링 OXM 서비스 추상화로 XML 읽기 로직 개선하기


11_03 이식 가능한 서비스 추상화

- 환경과 구현 기술의 변경과 무관하게 일관된 방식으로 기술을 다룰 수 있게 지원한다.
- 엔터프라이즈 애플리케이션에 사용되는 다양한 기술의 서비스 추상화가 제공된다.
- 제어의 영전 원리를 통해 POJO에게 제공된다.


12_02 빈 생명주기 콜백 인터페이스로 메타데이터 검증하기

# JSR 250
- 자바 플랫폼을 위한 공통 애노테이션에 관한 스펙

# 빈 생명주기 관여하기
- 스프링 컨테이너는 빈의 생서부터 초기화, 소멸까지 생명주기에 관여할 수 있는 확장 지점을 제공한다.
- 빈 객체에 콜백 인터페이스를 구현해 빈 생명주기에 관여할 수 있다.
- 자바 플랫폼에서 자주 사용되는 애노테이션을 표준화한 JSR-250을 지원한다.
- 빈 등록시 초기화 또는 소멸시 사용될 메서드를 등록 할 수 있다.



13_04 스프링 환경 추상화
# 환경 추상화란
- 실행 환경에 따른 빈 구성을 할 수 있고, 일관된 방식으로 외부 설정정보를 관리하고 접근한다.
- 프로파일과 프로퍼티 소스로 구성되며, 컨테이너와 통합 된 서비스 추상화이다.

# 빈 정의 프로파일로 환경에 따라 컨테이너 구성하기
- 빈 정의 프로파일은 실행 환경에 따라 컨테이너에 빈을 등록할 수 있는 매커니즘이다.
- @Profile 애노테이션으로 프로파일 별로 빈 등록을 할 수 있다.
- 프로파일은 OS 환경변수, JVM 시스템 파라메터, Environment API 등을 통해 활성화 할 수 있다.
- 보편적으로 환경은 개발, 운영 또는 성능 측정 등 애플리케이션이 실행되는 환경을 뜻한다.

# 애플리케이션 설정정보를 다루는 PropertySource 추상황
- 프로퍼티 소스는 키=밸류 형태로 작성된 설정정보로 보편적으로 애플리케이션 외부에서 불러 구성한다.
- 환경변수, 서블릿 매개변수, 프로퍼티 파일 등 다양한 소스를 일관된 방식으로 사용할 수 있게 지원한다.

# 스프링 표현 언어를 이용한 빈 프로퍼티 값 설정하기
- 스프링 표현 언어는 런타임시에 객체 그래프를 조회하고 조작하는 스프링 전용 표현식 언어다.
- 표현식을 통해 다른 빈 객체나 프로퍼티에 접근할 수도 있고, 다양한 연산도 할 수 있다.
- #{} 안에 작성된 표현식의 평가 결과를 빈 프로퍼티 값으로 설정한다.



